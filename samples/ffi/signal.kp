ffi.cdef[[
typedef int __kernel_pid_t;
typedef __kernel_pid_t pid_t;
typedef unsigned int __kernel_uid_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef int __kernel_timer_t;
union sigval {
	int sival_int;
	void * sival_ptr;
};
typedef union sigval sigval_t;
typedef long int __kernel_clock_t;
struct siginfo {
	int si_signo;
	int si_errno;
	int si_code;
	union {
		int _pad[28];
		struct {
			__kernel_pid_t _pid;
			__kernel_uid32_t _uid;
		} _kill;
		struct {
			__kernel_timer_t _tid;
			int _overrun;
			char _pad[0];
			sigval_t _sigval;
			int _sys_private;
		} _timer;
		struct {
			__kernel_pid_t _pid;
			__kernel_uid32_t _uid;
			sigval_t _sigval;
		} _rt;
		struct {
			__kernel_pid_t _pid;
			__kernel_uid32_t _uid;
			int _status;
			__kernel_clock_t _utime;
			__kernel_clock_t _stime;
		} _sigchld;
		struct {
			void * _addr;
			short int _addr_lsb;
		} _sigfault;
		struct {
			long int _band;
			int _fd;
		} _sigpoll;
	} _sifields;
};

int send_sig_info(int sig, struct siginfo *info, struct task_struct *p);
struct task_struct *find_task_by_vpid(pid_t vnr);
]]

SI_KERNEL = 0x08
SIG_KILL = 9

task = ffi.C.find_task_by_vpid(arg[1])
info = ffi.new("struct siginfo[1]")

info[0].si_signo = SIG_KILL
info[0].si_code = SI_KERNEL

ffi.C.send_sig_info(SIG_KILL, info, task)
